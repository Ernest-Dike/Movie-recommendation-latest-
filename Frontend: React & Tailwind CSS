import React, { useState, useEffect, useCallback } from 'react';

// --- API Service (Centralized API calls) ---
// This service will handle all communication with our backend and TMDB.
const api = {
  // Helper to handle fetch requests
  async fetch(url, options = {}) {
    // Get token from localStorage
    const token = localStorage.getItem('authToken');
    const headers = {
      'Content-Type': 'application/json',
      ...options.headers,
    };
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }

    const response = await fetch(url, { ...options, headers });

    if (response.status === 401 || response.status === 403) {
      // Auto-logout on auth error
      localStorage.removeItem('authToken');
      window.location.reload(); // Reload the app to reset state
    }

    if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'An error occurred');
    }
    
    // For DELETE requests that might not have a body
    if (response.status === 204) {
        return;
    }

    return response.json();
  },

  // --- Auth Endpoints ---
  register: (name, email, password) => api.fetch(`${process.env.REACT_APP_API_URL}/auth/register`, {
    method: 'POST',
    body: JSON.stringify({ name, email, password }),
  }),
  login: (email, password) => api.fetch(`${process.env.REACT_APP_API_URL}/auth/login`, {
    method: 'POST',
    body: JSON.stringify({ email, password }),
  }),

  // --- User Endpoints ---
  getProfile: () => api.fetch(`${process.env.REACT_APP_API_URL}/users/profile`),

  // --- Movie List Endpoints ---
  addMovieToList: (movieData) => api.fetch(`${process.env.REACT_APP_API_URL}/movies`, {
    method: 'POST',
    body: JSON.stringify(movieData),
  }),
  removeMovieFromList: (movieId) => api.fetch(`${process.env.REACT_APP_API_URL}/movies/${movieId}`, {
    method: 'DELETE',
  }),
  
  // --- TMDB Endpoints ---
  getTmdbMovies: (endpoint, filters = {}) => {
    const apiKey = process.env.REACT_APP_TMDB_API_KEY;
    if (!apiKey || apiKey === 'YOUR_TMDB_API_KEY_HERE') {
        throw new Error('TMDB API Key is not configured.');
    }
    const params = new URLSearchParams({
        api_key: apiKey,
        language: 'en-US',
        ...filters
    });
    return fetch(`https://api.themoviedb.org/3${endpoint}?${params.toString()}`).then(res => res.json());
  }
};


// --- Helper Components (Spinner, StarIcon, MovieCard) ---
// These are the same as before, no changes needed.
const StarIcon = ({ className }) => (<svg className={className} fill="currentColor" viewBox="0 0 20 20"><path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path></svg>);
const Spinner = () => (<div className="flex justify-center items-center h-full"><div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-indigo-500"></div></div>);
const MovieCard = ({ movie, onSelectMovie }) => (<div className="bg-gray-800 rounded-lg overflow-hidden shadow-lg hover:shadow-2xl transform hover:-translate-y-1 transition-all duration-300 cursor-pointer group" onClick={() => onSelectMovie(movie.id)}><img src={movie.poster_path ? `https://image.tmdb.org/t/p/w500${movie.poster_path}` : 'https://placehold.co/500x750/1f2937/ffffff?text=No+Image'} alt={`${movie.title} poster`} className="w-full h-auto object-cover transition-transform duration-300 group-hover:scale-105" onError={(e) => { e.target.onerror = null; e.target.src='https://placehold.co/500x750/1f2937/ffffff?text=No+Image'; }} /><div className="p-4"><h3 className="text-lg font-bold text-white truncate">{movie.title}</h3><div className="flex items-center mt-2 text-sm text-gray-400"><StarIcon className="w-4 h-4 text-yellow-400 mr-1" /><span>{movie.vote_average.toFixed(1)}</span><span className="mx-2">|</span><span>{movie.release_date ? movie.release_date.substring(0, 4) : 'N/A'}</span></div></div></div>);


// --- Main Application Components ---

const AuthPage = ({ onAuthSuccess }) => {
    // Same as before, but uses the new `api` service
    const [isLogin, setIsLogin] = useState(true);
    const [name, setName] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState(null);
    const [loading, setLoading] = useState(false);

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError(null);
        setLoading(true);
        try {
            let authResult;
            if (isLogin) {
                authResult = await api.login(email, password);
            } else {
                // After successful registration, log the user in automatically
                await api.register(name, email, password);
                authResult = await api.login(email, password);
            }
            onAuthSuccess(authResult);
        } catch (err) {
            setError(err.message);
        } finally {
            setLoading(false);
        }
    };
    
    return (
        <div className="max-w-md mx-auto mt-10 p-8 bg-gray-800 rounded-lg shadow-xl">
            <h2 className="text-3xl font-bold text-white text-center mb-6">{isLogin ? 'Login' : 'Sign Up'}</h2>
            {error && <p className="bg-red-500/20 text-red-300 p-3 rounded-md mb-4 text-center">{error}</p>}
            <form onSubmit={handleSubmit}>
                {!isLogin && (<div className="mb-4"><label className="block text-gray-300 text-sm font-bold mb-2" htmlFor="name">Name</label><input className="w-full bg-gray-700 text-white rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-indigo-500" id="name" type="text" value={name} onChange={(e) => setName(e.target.value)} required /></div>)}
                <div className="mb-4"><label className="block text-gray-300 text-sm font-bold mb-2" htmlFor="email">Email</label><input className="w-full bg-gray-700 text-white rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-indigo-500" id="email" type="email" value={email} onChange={(e) => setEmail(e.target.value)} required /></div>
                <div className="mb-6"><label className="block text-gray-300 text-sm font-bold mb-2" htmlFor="password">Password</label><input className="w-full bg-gray-700 text-white rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-indigo-500" id="password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} required /></div>
                <div className="flex items-center justify-between"><button className="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:shadow-outline transition-colors duration-300 disabled:bg-indigo-400" type="submit" disabled={loading}>{loading ? 'Processing...' : (isLogin ? 'Sign In' : 'Create Account')}</button></div>
                <p className="text-center text-gray-400 text-sm mt-6">{isLogin ? "Don't have an account?" : 'Already have an account?'} <button type="button" className="font-bold text-indigo-400 hover:text-indigo-300 ml-2" onClick={() => { setIsLogin(!isLogin); setError(null); }}>{isLogin ? 'Sign Up' : 'Login'}</button></p>
            </form>
        </div>
    );
};

// HomePage now includes filtering
const HomePage = ({ onSelectMovie }) => {
    const [movies, setMovies] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [searchTerm, setSearchTerm] = useState('');
    const [filters, setFilters] = useState({
        sort_by: 'popularity.desc',
        'vote_average.gte': 0,
        'primary_release_date.gte': '1900-01-01',
    });

    const fetchMovies = useCallback(async () => {
        setLoading(true);
        setError(null);
        try {
            let data;
            if (searchTerm.trim()) {
                data = await api.getTmdbMovies('/search/movie', { query: searchTerm });
            } else {
                data = await api.getTmdbMovies('/discover/movie', filters);
            }
            setMovies(data.results);
        } catch (err) {
            setError(err.message);
        } finally {
            setLoading(false);
        }
    }, [searchTerm, filters]);

    useEffect(() => {
        const timer = setTimeout(() => {
            fetchMovies();
        }, 500); // Debounce API calls
        return () => clearTimeout(timer);
    }, [fetchMovies]);
    
    const handleFilterChange = (e) => {
        setFilters(prev => ({ ...prev, [e.target.name]: e.target.value }));
    }

    return (
        <div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8 p-4 bg-gray-800 rounded-lg">
                <input
                    type="text"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    placeholder="Search by title..."
                    className="lg:col-span-2 p-2 bg-gray-700 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                />
                <div>
                    <label className="text-xs text-gray-400">Min Rating</label>
                    <select name="vote_average.gte" value={filters['vote_average.gte']} onChange={handleFilterChange} className="w-full p-2 bg-gray-700 text-white rounded-md">
                        <option value="0">Any</option><option value="8">8+</option><option value="7">7+</option><option value="6">6+</option>
                    </select>
                </div>
                <div>
                    <label className="text-xs text-gray-400">Sort By</label>
                    <select name="sort_by" value={filters.sort_by} onChange={handleFilterChange} className="w-full p-2 bg-gray-700 text-white rounded-md">
                        <option value="popularity.desc">Popularity</option><option value="vote_average.desc">Rating</option><option value="primary_release_date.desc">Release Date</option>
                    </select>
                </div>
            </div>

            {loading && <Spinner />}
            {error && <p className="text-center text-red-400">{error}</p>}
            {!loading && !error && movies.length > 0 && (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
                    {movies.map(movie => <MovieCard key={movie.id} movie={movie} onSelectMovie={onSelectMovie} />)}
                </div>
            )}
            {!loading && movies.length === 0 && <p className="text-center text-gray-400 mt-10">No movies found.</p>}
        </div>
    );
};

// MovieDetailsPage and ProfilePage now use the api service
const MovieDetailsPage = ({ movieId, userProfile, onUpdateProfile, onBack }) => {
    const [movie, setMovie] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    const isFavorite = userProfile?.favorites?.some(fav => fav.movie_id === movieId);
    const inWatchlist = userProfile?.watchlist?.some(item => item.movie_id === movieId);
    
    useEffect(() => {
        const fetchMovieDetails = async () => {
            setLoading(true);
            try {
                const data = await api.getTmdbMovies(`/movie/${movieId}`);
                setMovie(data);
            } catch (err) { setError(err.message); } finally { setLoading(false); }
        };
        fetchMovieDetails();
    }, [movieId]);

    const handleToggleList = async (listType) => {
        if (!userProfile) return;
        const isInList = listType === 'favorite' ? isFavorite : inWatchlist;
        
        try {
            if (isInList) {
                await api.removeMovieFromList(movieId);
            } else {
                await api.addMovieToList({
                    movieId: movie.id,
                    title: movie.title,
                    posterPath: movie.poster_path,
                    listType: listType
                });
            }
            // Refresh profile to get updated lists
            const updatedProfile = await api.getProfile();
            onUpdateProfile(updatedProfile);
        } catch(err) {
            console.error(`Failed to update ${listType}`, err);
            alert(`Error: ${err.message}`);
        }
    };

    if (loading) return <div className="mt-10"><Spinner /></div>;
    if (error) return <div className="text-center text-red-400 mt-10">{error}</div>;
    if (!movie) return null;

    return (
        <div className="text-white animate-fade-in">
            <button onClick={onBack} className="mb-6 bg-gray-700 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-300">&larr; Back</button>
            <div className="flex flex-col md:flex-row gap-8">
                <div className="md:w-1/3"><img src={movie.poster_path ? `https://image.tmdb.org/t/p/w500${movie.poster_path}` : 'https://placehold.co/500x750/1f2937/ffffff?text=No+Image'} alt={`${movie.title} poster`} className="w-full h-auto rounded-lg shadow-lg"/></div>
                <div className="md:w-2/3">
                    <h1 className="text-4xl md:text-5xl font-bold mb-2">{movie.title}</h1>
                    <p className="text-lg text-gray-400 italic mb-4">{movie.tagline}</p>
                    <div className="flex flex-wrap items-center gap-x-4 gap-y-2 mb-4">
                        <span className="flex items-center"><StarIcon className="w-5 h-5 text-yellow-400 mr-1" /> {movie.vote_average.toFixed(1)} / 10</span>
                        <span>{movie.runtime} min</span>
                        <span>{movie.release_date}</span>
                    </div>
                    {userProfile && (
                        <div className="flex space-x-4 mb-6">
                            <button onClick={() => handleToggleList('favorite')} className={`px-6 py-2 rounded-lg font-semibold transition-colors duration-300 ${isFavorite ? 'bg-red-600 hover:bg-red-700' : 'bg-gray-600 hover:bg-gray-500'}`}>{isFavorite ? '♥ Favorited' : '♡ Favorite'}</button>
                            <button onClick={() => handleToggleList('watchlist')} className={`px-6 py-2 rounded-lg font-semibold transition-colors duration-300 ${inWatchlist ? 'bg-blue-600 hover:bg-blue-700' : 'bg-gray-600 hover:bg-gray-500'}`}>{inWatchlist ? '✓ In Watchlist' : '+ Watchlist'}</button>
                        </div>
                    )}
                    <h2 className="text-2xl font-semibold mb-2">Overview</h2>
                    <p className="text-gray-300 mb-6">{movie.overview}</p>
                </div>
            </div>
        </div>
    );
};

const ProfilePage = ({ userProfile, onBack, onSelectMovie }) => {
    if (!userProfile) return <div className="text-center text-gray-400 mt-10">Loading profile...</div>;
    return (
        <div className="text-white animate-fade-in">
             <button onClick={onBack} className="mb-6 bg-gray-700 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-300">&larr; Home</button>
            <h1 className="text-4xl font-bold mb-2">Welcome, {userProfile.name}!</h1>
            <p className="text-gray-400 mb-8">{userProfile.email}</p>
            <div className="mb-10">
                <h2 className="text-2xl font-semibold mb-4 border-b-2 border-gray-700 pb-2">My Favorites</h2>
                {userProfile.favorites.length > 0 ? (<div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4">{userProfile.favorites.map(movie => <div key={movie.id} className="cursor-pointer" onClick={() => onSelectMovie(movie.movie_id)}><img src={`https://image.tmdb.org/t/p/w300${movie.poster_path}`} alt={movie.title} className="rounded-lg"/></div>)}</div>) : <p className="text-gray-500">No favorites yet.</p>}
            </div>
             <div>
                <h2 className="text-2xl font-semibold mb-4 border-b-2 border-gray-700 pb-2">My Watchlist</h2>
                 {userProfile.watchlist.length > 0 ? (<div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4">{userProfile.watchlist.map(movie => <div key={movie.id} className="cursor-pointer" onClick={() => onSelectMovie(movie.movie_id)}><img src={`https://image.tmdb.org/t/p/w300${movie.poster_path}`} alt={movie.title} className="rounded-lg"/></div>)}</div>) : <p className="text-gray-500">Watchlist is empty.</p>}
            </div>
        </div>
    );
};


// --- App Component (The Root) ---
export default function App() {
  const [auth, setAuth] = useState({ token: null, user: null });
  const [page, setPage] = useState('home');
  const [selectedMovieId, setSelectedMovieId] = useState(null);
  const [userProfile, setUserProfile] = useState(null);
  const [loading, setLoading] = useState(true);

  const fetchAndSetProfile = useCallback(async () => {
    try {
        const profile = await api.getProfile();
        setUserProfile(profile);
        setAuth(prev => ({ ...prev, user: { id: profile.id, name: profile.name, email: profile.email } }));
    } catch (error) {
        console.error("Failed to fetch profile", error);
        handleLogout(); // Log out if profile fetch fails
    }
  }, []);

  useEffect(() => {
      const token = localStorage.getItem('authToken');
      if (token) {
        setAuth({ token, user: {} });
        fetchAndSetProfile();
      }
      setLoading(false);
  }, [fetchAndSetProfile]);
  
  const handleAuthSuccess = (authResult) => {
    localStorage.setItem('authToken', authResult.token);
    setAuth(authResult);
    fetchAndSetProfile();
    setPage('home');
  };

  const handleLogout = () => {
    localStorage.removeItem('authToken');
    setAuth({ token: null, user: null });
    setUserProfile(null);
    setPage('home');
  };

  const handleSelectMovie = (movieId) => {
    setSelectedMovieId(movieId);
    setPage('movieDetails');
  };
  
  const navigateTo = (destination) => { setPage(destination); setSelectedMovieId(null); }
  
  const renderPage = () => {
    switch (page) {
      case 'movieDetails': return <MovieDetailsPage movieId={selectedMovieId} userProfile={userProfile} onUpdateProfile={setUserProfile} onBack={() => navigateTo('home')} />;
      case 'auth': return <AuthPage onAuthSuccess={handleAuthSuccess} />;
      case 'profile': return <ProfilePage userProfile={userProfile} onBack={() => navigateTo('home')} onSelectMovie={handleSelectMovie} />;
      case 'home': default: return <HomePage onSelectMovie={handleSelectMovie} />;
    }
  };
  
  if (loading) { return <div className="bg-gray-900 min-h-screen flex items-center justify-center"><Spinner/></div> }

  return (
    <div className="bg-gray-900 min-h-screen font-sans">
      <header className="bg-gray-800/80 backdrop-blur-sm shadow-lg sticky top-0 z-50">
        <nav className="container mx-auto px-6 py-4 flex justify-between items-center">
          <div className="text-2xl font-bold text-white cursor-pointer" onClick={() => navigateTo('home')}>Movie<span className="text-indigo-400">Recs</span></div>
          <div className="flex items-center space-x-4">
            {auth.token && userProfile ? (
              <>
                 <button onClick={() => navigateTo('profile')} className="text-gray-300 hover:text-white transition-colors">Profile</button>
                 <button onClick={handleLogout} className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-md transition-colors duration-300">Logout</button>
              </>
            ) : (<button onClick={() => navigateTo('auth')} className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-md transition-colors duration-300">Login</button>)}
          </div>
        </nav>
     </header>
 <main className="container mx-auto p-6">{renderPage()}</main>
</div>

